# Nome do Workflow
name: DevOpsLab Pipeline

# Evento que irá acionar a pipeline
on: 
  push:
    branches:
      - main

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Install Requirements
        run:  pip install flask flask-wtf pytest pytest-cov

      - name: Unit Test
        run: |
          coverage run --source=app -m pytest test.py
          coverage report -m
          coverage xml -i

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  

      - name: Login to Heroku Container registry
        env: 
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:login

      - name: Docker Build Image & Push Heroku Registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:push -a ${{ secrets.HEROKU_APP_NAME }} web

      - name: Docker Login
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: | 
          echo '${{ secrets.GOOGLE_CREDENTIALS }}' > key.json
          cat key.json | docker login -u _json_key --password-stdin https://us-central1-docker.pkg.dev/

      - name: Build Image & Push
        env: 
          ARTIFACT_REGISTRY: ${{ secrets.ARTIFACT_REGISTRY }}
        run: | 
          docker build -t ${{ secrets.ARTIFACT_REGISTRY }}/myapp:latest .
          docker push ${{ secrets.ARTIFACT_REGISTRY }}/myapp:latest

  DeployHom:
    needs: Build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:release -a ${{ secrets.HEROKU_APP_NAME }} web

  DeployProd:
    needs: DeployHom
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Autenticação do Heroku CLI via API TOKEN
      # https://devcenter.heroku.com/articles/authentication
      - name: Heroku Login
        run: | 
            cat > ~/.netrc <<EOF
              machine api.heroku.com
                login $HEROKU_EMAIL
                password $HEROKU_API_KEY
              machine git.heroku.com
                login $HEROKU_EMAIL
                password $HEROKU_API_KEY
            EOF
      - name: Auth GCP AppEngine
        env:
            HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
            HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

      # Adicionando o Repositório Remoto do Heroku para poder enviar o código da app
      - name: Add Heroku Remote
        run: heroku git:remote --app $HEROKU_APP_NAME
        env:
            HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
      - name: Deploy to App Engine
        id: appengine
        env: 
          ARTIFACT_REGISTRY: ${{ secrets.ARTIFACT_REGISTRY }}
        uses: 'google-github-actions/deploy-appengine@v0'
        with:
          image_url: ${{ secrets.ARTIFACT_REGISTRY }}/myapp:latest

      # Enviando o código da App para o Heroku fazer Deploy
      - name: Push to Heroku & Deploy
        run: git push heroku HEAD:main --force
      - name: Prod Test
        run: 'curl "${{ steps.appengine.outputs.url }}"'